From 52d1fd403b7f37a3b57829bf93ba9a440dffa61a Mon Sep 17 00:00:00 2001
From: Daniel van Vugt <daniel.van.vugt@canonical.com>
Date: Thu, 5 Nov 2020 19:11:38 +0800
Subject: [PATCH] clutter-stage-cogl: Expand the redraw_clip slightly for
 fractional scaling

Our redraw clip and framebuffer clip operate on different bases. We start
with a redraw clip in stage space, scale it up to generate a framebuffer
clip in physical pixels, store that for damage tracking, and then scale
down again to get the final redraw clip.

The problem with this is that with fractional scaling some information
gets lost when returning to the lower resolution stage space. That can
mean a rectangle of the redraw clip might be slightly smaller than the
corresponding rectangle in the framebuffer clip.

A problem can then arise if you paint two cullables where the top
honours the redraw clip, but the bottom does not, due to effects. So now
the bottom cullable is clipped to a slightly larger region (framebuffer
clip) than the top (redraw clip) and so some of the bottom cullable can
appear where the top should be.

To fix this, we now expand the redraw clip by 1px around its edges. But
only for fractional scaling where it might be required. This ensures
there are no pixels inside the framebuffer clip that we fail to render
when using the lower resolution redraw clip.

Closes: https://gitlab.gnome.org/GNOME/mutter/-/issues/1500

https://gitlab.gnome.org/GNOME/mutter/-/merge_requests/1539
---
 clutter/clutter/cogl/clutter-stage-cogl.c | 48 +++++++++++++++++++++++
 1 file changed, 48 insertions(+)

diff --git a/clutter/clutter/cogl/clutter-stage-cogl.c b/clutter/clutter/cogl/clutter-stage-cogl.c
index 9031f52..4775702 100644
--- a/clutter/clutter/cogl/clutter-stage-cogl.c
+++ b/clutter/clutter/cogl/clutter-stage-cogl.c
@@ -458,6 +458,29 @@ swap_framebuffer (ClutterStageWindow *stage_window,
     }
 }
 
+static cairo_region_t *
+expand_region (cairo_region_t *region,
+               int             radius)
+{
+  cairo_rectangle_int_t *rects;
+  int n_rects, i;
+
+  n_rects = cairo_region_num_rectangles (region);
+  rects = g_newa (cairo_rectangle_int_t, n_rects);
+  for (i = 0; i < n_rects; i++)
+    {
+      cairo_rectangle_int_t *rect = rects + i;
+
+      cairo_region_get_rectangle (region, i, rect);
+      rect->x -= radius;
+      rect->y -= radius;
+      rect->width += 2 * radius;
+      rect->height += 2 * radius;
+    }
+
+  return cairo_region_create_rectangles (rects, n_rects);
+}
+
 static void
 scale_and_clamp_rect (const graphene_rect_t *rect,
                       float                  scale,
@@ -779,6 +802,31 @@ clutter_stage_cogl_redraw_view (ClutterStageWindow *stage_window,
           /* Update the redraw clip region with the extra damage. */
           cairo_region_union (redraw_clip, view_damage);
 
+          /*
+           * We need to achieve several things for pixel-perfect clipping:
+           *  1. Draw AT LEAST the region returned by
+           *     clutter_stage_view_take_redraw_clip above.
+           *  2. Make fb_clip_region A SUPERSET of that so the GPU doesn't
+           *     discard anything we need to repaint. This is ensured by the
+           *     clamping in offset_scale_and_clamp_region above.
+           *  3. Set a redraw_clip that's A SUPERSET of the fb_clip_region
+           *     that itself was a superset of the original redraw clip.
+           *     For integer scales this is already guaranteed because
+           *     multiplying then dividing integers has no information loss.
+           *     But fractional scaling loses a little bit of precision when
+           *     we scale down again. So we need to expand the redraw_clip
+           *     here to cover for that...
+           */
+          if (fmodf (fb_scale, 1.f) > 0.f)
+            {
+              cairo_region_t *old_redraw_clip = redraw_clip;
+
+              redraw_clip = expand_region (redraw_clip, 1);
+              cairo_region_intersect_rectangle (redraw_clip, &view_rect);
+
+              cairo_region_destroy (old_redraw_clip);
+            }
+
           cairo_region_destroy (view_damage);
           cairo_region_destroy (fb_damage);
 
-- 
2.26.2

