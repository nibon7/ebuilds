From 3a7198b94eec93a49c1b61abefa8717eb6d7d335 Mon Sep 17 00:00:00 2001
From: Daniel van Vugt <daniel.van.vugt@canonical.com>
Date: Fri, 6 Nov 2020 17:28:18 +0800
Subject: [PATCH] clutter-stage-cogl: Simplify and optimize damage/clipping

* Reduces the number of scaling functions from two to one.
* Reduces the number of scaling passes from two to one.
* Reduces the number of union passes.

https://gitlab.gnome.org/GNOME/mutter/-/merge_requests/1539
---
 clutter/clutter/cogl/clutter-stage-cogl.c | 101 ++++++----------------
 1 file changed, 27 insertions(+), 74 deletions(-)

diff --git a/clutter/clutter/cogl/clutter-stage-cogl.c b/clutter/clutter/cogl/clutter-stage-cogl.c
index 794960e82..8374a9100 100644
--- a/clutter/clutter/cogl/clutter-stage-cogl.c
+++ b/clutter/clutter/cogl/clutter-stage-cogl.c
@@ -329,10 +329,8 @@ swap_framebuffer (ClutterStageWindow *stage_window,
 }
 
 static cairo_region_t *
-offset_scale_and_clamp_region (const cairo_region_t *region,
-                               int                   offset_x,
-                               int                   offset_y,
-                               float                 scale)
+scale_and_clamp_region (const cairo_region_t *region,
+                        float                 scale)
 {
   int n_rects, i;
   cairo_rectangle_int_t *rects;
@@ -356,7 +354,6 @@ offset_scale_and_clamp_region (const cairo_region_t *region,
       cairo_region_get_rectangle (region, i, rect);
 
       _clutter_util_rect_from_rectangle (rect, &tmp);
-      graphene_rect_offset (&tmp, offset_x, offset_y);
       graphene_rect_scale (&tmp, scale, scale, &tmp);
       _clutter_util_rectangle_int_extents (&tmp, rect);
     }
@@ -364,42 +361,6 @@ offset_scale_and_clamp_region (const cairo_region_t *region,
   return cairo_region_create_rectangles (rects, n_rects);
 }
 
-static cairo_region_t *
-scale_offset_and_clamp_region (const cairo_region_t *region,
-                               float                 scale,
-                               int                   offset_x,
-                               int                   offset_y)
-{
-  int n_rects, i;
-  cairo_rectangle_int_t *rects;
-  g_autofree cairo_rectangle_int_t *freeme = NULL;
-
-  n_rects = cairo_region_num_rectangles (region);
-
-  if (n_rects == 0)
-    return cairo_region_create ();
-
-  if (n_rects < MAX_STACK_RECTS)
-    rects = g_newa (cairo_rectangle_int_t, n_rects);
-  else
-    rects = freeme = g_new (cairo_rectangle_int_t, n_rects);
-
-  for (i = 0; i < n_rects; i++)
-    {
-      cairo_rectangle_int_t *rect = &rects[i];
-      graphene_rect_t tmp;
-
-      cairo_region_get_rectangle (region, i, rect);
-
-      _clutter_util_rect_from_rectangle (rect, &tmp);
-      graphene_rect_scale (&tmp, scale, scale, &tmp);
-      graphene_rect_offset (&tmp, offset_x, offset_y);
-      _clutter_util_rectangle_int_extents (&tmp, rect);
-    }
-
-  return cairo_region_create_rectangles (rects, n_rects);
-}
-
 static void
 paint_stage (ClutterStageCogl *stage_cogl,
              ClutterStageView *view,
@@ -469,7 +430,8 @@ clutter_stage_cogl_redraw_view_primary (ClutterStageCogl *stage_cogl,
   gboolean swap_with_damage;
   cairo_region_t *redraw_clip;
   cairo_region_t *queued_redraw_clip = NULL;
-  cairo_region_t *fb_clip_region;
+  cairo_region_t *new_damage = NULL;
+  cairo_region_t *scaled_cumulative_damage = NULL;
   cairo_region_t *swap_region;
   float fb_scale;
   int fb_width, fb_height;
@@ -521,10 +483,8 @@ clutter_stage_cogl_redraw_view_primary (ClutterStageCogl *stage_cogl,
 
   if (use_clipped_redraw)
     {
-      fb_clip_region = offset_scale_and_clamp_region (redraw_clip,
-                                                      -view_rect.x,
-                                                      -view_rect.y,
-                                                      fb_scale);
+      new_damage = cairo_region_copy (redraw_clip);
+      cairo_region_translate (new_damage, -view_rect.x, -view_rect.y);
     }
   else
     {
@@ -534,54 +494,42 @@ clutter_stage_cogl_redraw_view_primary (ClutterStageCogl *stage_cogl,
         .width = fb_width,
         .height = fb_height,
       };
-      fb_clip_region = cairo_region_create_rectangle (&fb_rect);
+      new_damage = cairo_region_create_rectangle (&fb_rect);
 
       g_clear_pointer (&redraw_clip, cairo_region_destroy);
       redraw_clip = cairo_region_create_rectangle (&view_rect);
     }
 
-  g_return_if_fail (!cairo_region_is_empty (fb_clip_region));
+  g_return_if_fail (!cairo_region_is_empty (new_damage));
 
   swap_with_damage = FALSE;
   if (has_buffer_age)
     {
-      clutter_damage_history_record (view_priv->damage_history,
-                                     fb_clip_region);
+      clutter_damage_history_record (view_priv->damage_history, new_damage);
 
       if (use_clipped_redraw)
         {
-          cairo_region_t *fb_damage;
-          cairo_region_t *view_damage;
+          cairo_region_t *cumulative_damage = cairo_region_copy (new_damage);
           int age;
 
-          fb_damage = cairo_region_create ();
-
           for (age = 1; age <= buffer_age; age++)
             {
               const cairo_region_t *old_damage;
 
               old_damage =
                 clutter_damage_history_lookup (view_priv->damage_history, age);
-              cairo_region_union (fb_damage, old_damage);
+              cairo_region_union (cumulative_damage, old_damage);
             }
 
-          /* Update the fb clip region with the extra damage. */
-          cairo_region_union (fb_clip_region, fb_damage);
-
-          /* Update the redraw clip with the extra damage done to the view */
-          view_damage = scale_offset_and_clamp_region (fb_damage,
-                                                       1.0f / fb_scale,
-                                                       view_rect.x,
-                                                       view_rect.y);
-
-          cairo_region_union (redraw_clip, view_damage);
-
-          cairo_region_destroy (view_damage);
-          cairo_region_destroy (fb_damage);
+          scaled_cumulative_damage =
+            scale_and_clamp_region (cumulative_damage, fb_scale);
+          cairo_region_translate (cumulative_damage, view_rect.x, view_rect.y);
+          cairo_region_union (redraw_clip, cumulative_damage);
+          cairo_region_destroy (cumulative_damage);
 
           CLUTTER_NOTE (CLIPPING, "Reusing back buffer(age=%d) - repairing region: num rects: %d\n",
                         buffer_age,
-                        cairo_region_num_rectangles (fb_clip_region));
+                        cairo_region_num_rectangles (scaled_cumulative_damage));
 
           swap_with_damage = TRUE;
         }
@@ -591,7 +539,7 @@ clutter_stage_cogl_redraw_view_primary (ClutterStageCogl *stage_cogl,
 
   if (use_clipped_redraw)
     {
-      cogl_framebuffer_push_region_clip (fb, fb_clip_region);
+      cogl_framebuffer_push_region_clip (fb, scaled_cumulative_damage);
 
       paint_stage (stage_cogl, view, redraw_clip);
 
@@ -612,13 +560,18 @@ clutter_stage_cogl_redraw_view_primary (ClutterStageCogl *stage_cogl,
    * the resize anyway so it should only exhibit temporary
    * artefacts.
    */
-  if (use_clipped_redraw)
-    swap_region = cairo_region_copy (fb_clip_region);
+  if (scaled_cumulative_damage)
+    {
+      swap_region = scaled_cumulative_damage;
+      scaled_cumulative_damage = NULL;
+    }
   else
-    swap_region = cairo_region_create ();
+    {
+      swap_region = cairo_region_create ();
+    }
 
   g_clear_pointer (&redraw_clip, cairo_region_destroy);
-  g_clear_pointer (&fb_clip_region, cairo_region_destroy);
+  g_clear_pointer (&new_damage, cairo_region_destroy);
 
   COGL_TRACE_BEGIN_SCOPED (ClutterStageCoglRedrawViewSwapFramebuffer,
                            "Paint (swap framebuffer)");
-- 
GitLab

